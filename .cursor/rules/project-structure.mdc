---
description: Project Structure and Organization Guide
globs: **/*
alwaysApply: false
---
 # Project Structure Reference

This document outlines the organization of our codebase and provides references to important directories and files.

## Root Level Organization

- `app/` - Next.js App Router pages and layouts
  - `app/api/auth/` - Authentication endpoints (Phase 2)
  - `app/(auth)/` - Auth-related pages (Phase 2)
  - `app/(main)/` - Main application pages (Phase 1)
- `components/` - Reusable UI components
  - `components/auth/` - Authentication components (Phase 2)
  - `components/ui/` - Core UI components (Phase 1)
    - `toast.tsx` - Toast notification primitive
    - `use-toast.tsx` - Toast hook and context
    - `toaster.tsx` - Toast notification renderer
  - `components/profile/` - User profile management components
    - `shipping-addresses.tsx` - Shipping address management
    - `preferences.tsx` - User preferences and notifications
    - `order-history.tsx` - Order history display
    - `profile-header.tsx` - User profile header with avatar and user info
    - `profile-tabs.tsx` - Profile section navigation
    - `edit-profile-dialog.tsx` - Profile editing modal with avatar support
- `lib/` - Utility functions and business logic
  - `lib/supabase/` - Supabase integration (Phase 2)
  - `lib/utils/` - General utilities (Phase 1)
  - `lib/repositories/` - Data access layer
    - `user-repository.ts` - User data management with avatar support
    - `product-repository.ts` - Product data management
    - `category-repository.ts` - Category data management
- `types/` - TypeScript type definitions
  - `types/supabase.ts` - Database types including user profiles with avatar
  - `types/user.ts` - User-related types
  - `types/product.ts` - Product-related types
- `tests/` - Test files and configurations
  - `tests/auth/` - Authentication test suites
    - `auth-flow.test.ts` - Authentication flow tests
  - `tests/setup.ts` - Test setup and configuration
- `public/` - Static assets
- `scripts/` - Utility scripts and automation tools
- `.cursor/` - Documentation and project guidelines
- `config/` - Configuration files

## Documentation

All project documentation is organized in the following locations:

- `.cursor/` - Project guides, checklists, and development standards
  - `rules/` - Project rules and guidelines
    - `project-structure.mdc` - This file
    - `phase-transitions.mdc` - Phase transition rules
    - `development-standards.mdc` - Coding standards
  - `project-plan.md` - Overall project roadmap and status
  - `DEPLOY.md` - Deployment procedures and environment setup

## Scripts Organization

- `scripts/` - All utility and automation scripts
  - `fixes/` - Phase-specific fix scripts
    - `fix-typescript.sh` - TypeScript fixes
    - `fix-react.sh` - React/Next.js fixes
    - `fix-performance.sh` - Performance fixes
  - `fix-lint-issues.sh` - Main lint fixing script
  - `check-lint.sh` - Lint checking script

- `scripts/logs/` - Logs from script executions
  - `lint-check-*.log` - Lint check reports
  - `lint-fixes-*.log` - Fix application logs

## Special Files

- `middleware.ts` - Next.js middleware for auth and routing (root level)
- `instrumentation.ts` - Performance monitoring and error tracking (root level)
- `.eslintrc.js` - ESLint configuration with phase-specific rules
- `.github/workflows/ci.yml` - CI pipeline with phase-aware checks

## Environment and Configuration

- `.env.*` - Environment variables (root level)
- `.env-files/` - Backup copies of environment files
- `config/` - Configuration files like tailwind, tsconfig, etc.

## Phase-Specific Organization

### Phase 1 (Completed)
- Main application functionality
- UI components and layouts
- Current routing and pages
- Non-Supabase utilities
- Fixed 404 errors and navigation issues
- Implemented basic error handling

### Phase 2 (Current)
- âœ… Authentication system with Supabase Auth
- âœ… Authentication test suite
- âœ… Basic user profile types and repository
- ðŸ”„ Supabase integration
- ðŸ”„ Protected routes and middleware
- ðŸ”„ User profile components
- ðŸ”„ Database functionality
- ðŸ”„ Profile image upload with Supabase storage
- ðŸ”„ User preferences management
- ðŸ”„ Shipping address management

### Test Organization

### Authentication Tests (Completed)
Located in `tests/auth/`:
- `auth-flow.test.ts` - Tests for authentication flows
  - âœ… User signup and login
  - âœ… Profile creation
  - âœ… Password reset
  - âœ… Session management
  - âœ… Error handling
  - âœ… Mock Supabase client implementation

### Test Configuration
- `vitest.config.ts`