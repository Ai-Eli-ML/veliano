---
description: Admin Portal Reference Guide
globs: ["**/admin/**"]
---
# Admin Portal Reference Guide

This document outlines the structure, components, and development guidelines for the Veliano Admin Portal, a comprehensive management interface for the luxury jewelry business specializing in custom grillz.

## Tech Stack

The admin portal is built on:

- **Next.js 15** - App Router architecture
- **TypeScript** - For type safety
- **shadcn/ui** - Component library
- **Supabase** - Database, authentication, and storage
- **Stripe** - Payment processing
- **React Hook Form** - Form handling with Zod validation
- **TanStack Table** - Data tables with sorting, filtering, and pagination
- **Lucide Icons** - Icon library

## Getting Started

To work on the admin portal:

1. Clone the repository
2. Install dependencies:
   ```bash
   npm install
   ```
3. Set up environment variables (see .env.example)
4. Run the development server:
   ```bash
   npm run dev
   ```
5. Access the admin portal at http://localhost:3000/admin

## Admin Portal Structure

- `app/admin/` - Root of the admin portal
  - `layout.tsx` - Main layout with sidebar navigation
  - `page.tsx` - Dashboard/home page
  - `products/` - Product management
    - `page.tsx` - List of all products
    - `[id]/page.tsx` - Individual product details
    - `new/page.tsx` - New product creation form
  - `categories/` - Category management
    - `page.tsx` - List of all categories
    - `[id]/page.tsx` - Individual category details
    - `new/page.tsx` - New category creation form
  - `customers/` - Customer management
    - `page.tsx` - List of all customers
    - `[id]/page.tsx` - Individual customer details
  - `orders/` - Order management
    - `page.tsx` - List of all orders
    - `[id]/page.tsx` - Individual order details
  - `custom-orders/` - Custom orders management
    - `page.tsx` - List of all custom orders
    - `[id]/page.tsx` - Individual order details
    - `new/page.tsx` - New order creation form

## UI Components

- `components/admin/` - Admin-specific components
  - `dashboard/` - Dashboard components
    - `sales-chart.tsx` - Sales visualization
    - `metrics-cards.tsx` - Key metrics display
    - `recent-orders.tsx` - Recent orders list
  - `products/` - Product management components
    - `product-form.tsx` - Form for creating/editing products
    - `product-images.tsx` - Product image management
    - `product-variants.tsx` - Product variants management
  - `orders/` - Order management components
    - `order-timeline.tsx` - Order status timeline
    - `order-items.tsx` - Order items display
- `components/ui/` - Shared UI components used in the admin portal
  - `calendar.tsx` - Calendar component for date selection
  - `date-picker.tsx` - Date picker with calendar integration
  - `popover.tsx` - Popover component for UI elements
  - `data-table.tsx` - Reusable data table component

## Custom Order Workflow

The custom grillz orders follow this workflow:

1. **Order Creation** - Created via the new order form
2. **Impression Kit** - Kit sent, received, and validated
3. **Design Phase** - 3D modeling and design approval
4. **Manufacturing** - Production of the custom item
5. **Shipping** - Shipping and delivery
6. **Follow-up** - Post-purchase service

## Data Management

- Customer data is stored in the `customers` table
- Order data is stored in the `orders` table
- Custom order data is stored in the `custom_orders` table
- Order items are stored in the `order_items` table
- Custom order items are stored in the `custom_order_items` table
- Timeline events are stored in the `order_timeline` table
- Product data is stored in the `products` table
- Product variants are stored in the `product_variants` table
- Product images are stored in the `product_images` table
- Categories are stored in the `categories` table

## Development Guidelines

- Use TypeScript for all components
- Implement form validation with React Hook Form and Zod
- Use shadcn/ui components for UI elements
- Implement proper loading states for async operations
- Follow the repository pattern for data access
- Use Server Actions for data mutations
- Implement proper error handling with Sentry integration
- Use optimistic updates for improved user experience
- Ensure all data tables have proper pagination, sorting, and filtering
- Implement proper access control using RLS policies