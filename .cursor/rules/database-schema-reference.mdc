---
description: Database Schema Reference
globs: **/supabase/**", "**/types/supabase.ts
alwaysApply: false
---
 # Database Schema Reference

This document provides a reference to the database schema and data access patterns for the Veliano e-commerce application.

## Key Documentation

- `.cursor/supabase-integration-guide.md` - Comprehensive guide for database schema and integration
- `types/supabase.ts` - TypeScript type definitions for the database schema

## Main Tables

### Products

```sql
create table products (
  id uuid primary key default uuid_generate_v4(),
  name text not null,
  slug text not null unique,
  description text,
  price numeric not null check (price >= 0),
  compare_at_price numeric check (compare_at_price >= 0),
  featured boolean default false,
  is_new boolean default false,
  in_stock boolean default true,
  stock_quantity integer default 0,
  category_id uuid references categories(id),
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
)
```

### Custom Orders

```sql
create table custom_orders (
  id uuid primary key default uuid_generate_v4(),
  order_number text not null unique,
  customer_id uuid references customers(id) not null,
  status text not null default 'pending',
  total_price numeric not null check (total_price >= 0),
  impression_kit_status text not null default 'not_sent',
  impression_kit_tracking text,
  teeth_selection jsonb not null,
  material text not null,
  design_details text,
  estimated_completion_date timestamp with time zone,
  notes text,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
)
```

### Customers

```sql
create table customers (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid references auth.users(id),
  name text not null,
  email text not null unique,
  phone text,
  address jsonb,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
)
```

## Repository Pattern

Use the repository pattern for database access:

```typescript
export async function getCustomOrders(options?: {
  status?: string;
  limit?: number;
  offset?: number;
}) {
  const supabase = await createServerSupabaseClient();
  
  let query = supabase
    .from('custom_orders')
    .select(`
      *,
      customer:customers(id, name, email, phone),
      order_items:custom_order_items(*)
    `);
    
  if (options?.status) {
    query = query.eq('status', options.status);
  }
  
  // Add pagination
  if (options?.limit) {
    query = query.limit(options.limit);
  }
  
  if (options?.offset) {
    query = query.range(options.offset, options.offset + (options.limit || 10) - 1);
  }
  
  const { data, error } = await query;
  
  if (error) {
    console.error('Error fetching custom orders:', error);
    throw new Error('Failed to fetch custom orders');
  }
  
  return data;
}
```

## Server Actions

Use Next.js Server Actions for data mutations:

```typescript
"use server"

export async function updateOrderStatus(
  orderId: string, 
  status: string, 
  note?: string
) {
  const supabase = await createServerSupabaseClient();
  
  // Check authentication
  const { data: { session } } = await supabase.auth.getSession();
  if (!session) {
    throw new Error("Unauthorized");
  }
  
  // Perform update
  const { error } = await supabase
    .from('custom_orders')
    .update({
      status,
      updated_at: new Date().toISOString(),
    })
    .eq('id', orderId);
    
  if (error) {
    throw new Error(`Failed to update order: ${error.message}`);
  }
  
  // Add timeline entry
  if (note) {
    await supabase
      .from('order_timeline')
      .insert({
        order_id: orderId,
        status: `Status Changed to ${status}`,
        note,
        user_id: session.user.id,
        created_at: new Date().toISOString(),
      });
  }
  
  return { success: true };
}