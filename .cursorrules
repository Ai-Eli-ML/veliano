{
  "context": {
    "projectDescription": "Veliano Jewelry E-commerce application specializing in custom grillz, built with Next.js 15, TypeScript, and Supabase",
    "priorityDocuments": [
      ".cursor/project-plan.md",
      ".cursor/DEPLOY.md",
      ".cursor/rules/project-structure.mdc",
      "https://nextjs.org/docs"
    ],
    "projectPhase": "Phase 2: User Profiles and Authentication"
  },
  "instructions": [
    "Always reference the project plan (.cursor/project-plan.md) for guidance on priorities and next steps",
    "Implement Supabase integration while maintaining code quality",
    "When working with deployment code, automatically reference the DEPLOY.md guide",
    "Follow the development standards in .cursor/rules/development-standards.mdc",
    "Use the project structure guide when navigating or creating new files",
    "Always follow Next.js 15 official documentation structure and conventions",
    "Implement error handling according to Next.js 15 App Router patterns",
    "Ensure all code changes maintain type safety and pass linting",
    "Commit changes frequently with clear, descriptive messages following conventional commits"
  ],
  "commitGuidelines": {
    "format": "<type>(<scope>): <description>",
    "types": [
      "feat",
      "fix",
      "refactor",
      "style",
      "docs",
      "test",
      "chore"
    ],
    "rules": [
      "Use present tense ('add' not 'added')",
      "First line should be under 72 characters",
      "Describe both what and why",
      "Reference issues when relevant"
    ],
    "examples": [
      "feat(auth): implement user profile types and repository",
      "fix(types): resolve TypeScript errors in email service",
      "refactor(db): update schema for product variants"
    ]
  },
  "currentPriorities": [
    "Complete Vercel deployment setup and testing",
    "Implement remaining user profile components",
    "Set up Supabase RLS policies",
    "Implement profile image upload with Supabase storage",
    "Add user preferences management",
    "Integrate shipping address management",
    "Continue fixing remaining TypeScript issues"
  ],
  "codeGeneration": {
    "defaultTechStack": {
      "frontend": "Next.js 15 App Router",
      "styling": "shadcn/ui with Tailwind CSS",
      "dataFetching": "Server Components and Server Actions with Supabase",
      "database": "Supabase with repository pattern",
      "authentication": "Supabase Auth with middleware protection"
    },
    "bestPractices": [
      "Implement Server Components by default",
      "Use TypeScript for all code with explicit types",
      "Follow functional component patterns",
      "Prioritize performance optimization",
      "Include proper error handling",
      "Follow Next.js 15 conventions for file naming and directory structure",
      "Use App Router patterns for routing and layouts",
      "Implement error boundaries at appropriate levels",
      "Follow Next.js 15 metadata and SEO best practices",
      "Use Supabase type-safe queries with error handling"
    ]
  },
  "nextjs15Guidelines": {
    "directoryStructure": {
      "app": {
        "description": "Main application directory using App Router",
        "conventions": [
          "Use page.tsx for route segments",
          "Use layout.tsx for shared layouts",
          "Place error.tsx for client-side error handling",
          "Place global-error.tsx for root error handling",
          "Use loading.tsx for suspense boundaries",
          "Group related routes in folders"
        ]
      },
      "components": {
        "description": "Reusable UI components",
        "conventions": [
          "Use 'use client' directive for client components",
          "Default to Server Components when possible",
          "Group by feature or global usage"
        ]
      }
    },
    "errorHandling": {
      "conventions": [
        "Use error.tsx for client-side errors",
        "Use global-error.tsx for root errors",
        "Implement reset functionality in error boundaries",
        "Log errors appropriately in production",
        "Ensure type safety in error handling components",
        "Add error tracking with Sentry integration"
      ]
    }
  },
  "analysisMode": {
    "autoReference": true,
    "deepAnalysis": true,
    "oneShot": true,
    "followProjectPlan": true,
    "followNextJsDocs": true,
    "enforceTypeChecks": true,
    "enforceLinting": true
  }
} 